ATTRIBUTES:
1. href
2. src
3. width height
4. alt
5. style
6. lang
7. title
8. 










WEB : It is a collection of websites or webpages or information .It is the interlinkage between, webpages & information.
WEBPAGE: It is the document written in hypertext or html.
TYPES OF WEBPAGE : 
1) STATIC WEBPAGE : The content at the webpage remains same for everyone.
EX: Wikipedia.
2) DYNAMIC WEBPAGE : The content differs from person to person.
EX: youtube , instagram , linkedin .
HTML
(HYPER TEXT MARKUP LANGUAGE)
It is used to create a structure for a webpage.
It is not case-sensitive.
HTML STRUCUTURE :
<!DOCTYPE html>
<html>
<head>
<title>Page Title</title>
</head>
<body>

<h1>This is a Heading</h1>
<p>This is a paragraph.</p>

</body>
</html>
~ <!DOCTYPE html> : 
It specifies about the type of document and version to the webpage.
~ <html> :
This is the root tag where it is the entry point of our code.
~ <head> :
<meta> : It is used to specify the specification of the webpage or the information about the webpage . 
<title> :It is used to give title to the webpage .
~ <body> : The content which is to be rendered on to the webpage as the content which is needed to be appear on the webpage should be written in this tag.
TAGS :
Tags are predefined keywords enclosed in angular braces<>...The content will appear on the webpage based on the used tag.
TYPES OF TAGS :
~ PAIRED TAGS :
The tag which are having opening tag and closing tag.
EX : all the heading tags..
~ UNPAIRED TAGS :
These tags donot have closing tags..It is also known as self closing tag.
HEADING TAG :
There is a set of heading tags.These tags are used to write titles in a webpages.
The heading tags are h1,h2,h3,h4,h5,h6
<h1></h1>
The size of the font varies from big to small
h1 tag has the highest size
g6 tag has the smallest size
<p></p>
FORMATTING TAGS :
<b> : used to change the font to bold.
<strong> : It changes font to bold and treats the content as important.
<i> : used to represent the content in italic formation It is also used to represent italic <em>
<u> : used to underline the content on the webpage.
<ins> : insert used to underline the content ...same as <u> tag.
<big> : used to represent the content in big size.
<small> : used to represent the content in small size.
<sub> : use to represent the content which is having subscript values.
ex : chemical formulas
<sup> : used to represent the content consisting of super script values.
ex : mathematical formulas .
<strike> : used to strike the content on webpage.
<q> : it will provide quotations to the content.
<mark> : it will highlight content with yellow background color..
HTML LISTS : 
it allows to group a set of related items together.
ORDERED LISTS
UNORDERED LISTS
DESCRIPTIVE LISTS
ORDERED LIST : it allows to group the set of related elements sequentially
it also known as number list
ol : indicates creating ordered list
li : to indicate list elements

UNORDERED LISTS :it allows to group set of related elements with symbols.
it is also known as bullet list.

ul : it indicates that we are creating unordered list
li : it indicates list elements

CSS :cascading style sheets
syntax:
selector{
         property1:val1;
         property2:val2; 
}
property =font,background color
values=colors
types of adding css:
1.inline=with in the tags or body
it refers to adding css in the same line of HTML using style attribute
ex : <h1 style="color: blueviolet;">hii..</h1>
2.internal= by using style tags we can create a color to it.
it refers to writing the css in the same HTML file styling are added inside head tag (<head>) by mentioning the style tag (<style>) into it , in which the css code is written.
ex:<head>
      <style>
       h1{
          color:red;
          background color:black;
         }
         </style>
  </head>

3.external=This refers to adding the styles by maintaining a separate file saved with the extension  .css
- to establish connection  between html and css files we are using <link> tag along with the attributes rel and href
rel-refers to relation of css file w.r.t html document i.e
style sheet (rel="atylesheet")
href-refers to hyper refernce whi
ch is the path of .css file(href="path of .css file")
ex:index.html
          <head>
          <link rel="stylesheet"href="style.css">
          </head>
style.css
h1{
       color:red;
}
SIMPLE SELECTORS:
used to select an element based on attributes like id or class or based on tag name , grouping .
TYPES OF SELECTORS :
1.SIMPLE SELECTORS
2.COMBINATOR SELECTORS
3.PSEUDO- CLASS SELECTOR
4.PSEUDO-ELEMENT SELECTORS
5.ATTRIBUTE SELECTORS

1. ID(#): it is used to target uniquely one single element from the web page.
ex :
   <!--id selector 
   <h1 id="first">this is heading1</h1>
   <h2 id="second">this is heading2</h2>
   <p id="para">paragraph</p>-->

2. CLASS(.) : it is used to target multiple elements to which common styles need to be applied.
ex :
<!--class selector
   <h1 class="first">this is something</h1>
   <h1 class="">this is something</h1>
   <p class="second">something paragraph</p>-->

3. TAGNAME: this selector is used to target the element based on the name of tag.
ex :
    <input type="text">
    <button>click here</button>

4.GROUPING(,): it is used to target multiple elements upon which the common styles need to be applied.
ex: 
   <input type="text">
   <button>click here</button>
    <p class="first">this is graph</p>
    <p id="para">this is graph</p>

--grouping is done irrespective of tag name ,id or class.
5.UNIVERSAL SELECTOR(*):it is used to target all the elements in the web page.

COMBINATOR SELECTOR:these are used to target elements based on relationship with other elements.
the relationship can be either parent/child or sibling relationship.
TYPES :
1. descendent selector(space) : it is used to target direct and indirect child of a given parent tag.
2. child selector(>) : it is used to target direct child of a given parent tag.
3. adjacent sibling (+):
4.general sibling (~):

PSUEDOCLASS SELECTOR: these are used to target elements whenever they are at a special state.
special state might be hovering upon elements , active ,and visited state links etc....
- these are denoted by symbol (:)
syntax :
         selector:pseudo-class{
                                property:value;
                               } 
1. (:hover) : it is used to define styles for an element when the cursor is moved upon it.
2. visited : used to define styles for anchor tag after line has been visited.
3. active : used to define styles for anchor whenever it is in active.
4. focus : used to apply styles for an input field when clicked upon it.
5. last-child, first-child ,nth-child , : used to select a particular element from the given parent element.


PSUEDO-ELEMENT SELETORS : selectors are used to target the specified part of the content.
these are denoted by symbol (::)
syntax :
            selector:psuedo-element{
                                    property:value;
                                   }
TYPES :
1. first-letter : used to target the first letter of a content from a given tag 
2. first-line : used to target the first line of a content from a given tag.
3. selection : used to style the content when the cursor is dragged upon it.
4. before : used to place the content before the targeted html element.
5. after: used to place the content after the targeted html element.


ATTRIBUTE SELCTORS : these selectors are mainly used to target the element based on any types of attributes.
---these are denoted by ([])
types :
1. [attribute] : used to target elements upon name  of the attribute 
2. [attribute="value"] : used to target element based on attribute along with its value.


FLEX BOX:
PARENT/FLEX CONTAINER PROPERTIES:
display: flex
flex-direction: row | column| row-reverse| column-reverse
flex-wrap: wrap| no-wrap| wrap-reverse
flex-flow: "flex-direction"| |"flex-wrap"|
justify-content: flex-start| flex-end| center| space-between| space-around| space-evenly
align-content: flex-start| flex-end| center| space-between| space-around| space-evenly

CHILD/FLEX ITEMS PROPERTIES:
order: integer
align-self: flex-start| flex-end| center| auto
flex-grow: number
flex-shrink: number


box-shadow:
min 2 values, max 5 values
1. horizontal offset
2. vertical offset
3. blur radius
4. spread distance
5. shadow color


TRANSITION:
transition : transition property, transition time, transition timing function, transition delay
transition-timing-function: ease, ease in, ease out,ease-in-out


GRID Properties:

Parent/Grid Container Properties:

display:grid

grid-template-columns

grid-template-rows

grid-template

grid-template-areas

grid-row-gap

grid-column-gap

grid-gap

justify-items

align-items

Child/Grid items properties:

grid-column-start

grid-column-end

grid-column

grid-row-start

grid-row-end

grid-row

grid-area

justify-self

align-self


            animation-name: roll;
            animation-duration: 3s;
            animation-iteration-count: infinite;
            animation-timing-function: ease-in;
            animation-delay: 2s;

JAVA SCRIPT:
. It is the most popular programming language
. java script is only used as a frontend technology but also used as a backend technology
. JS is a scripting language which is used to add functionalities to our web pages 


HISTORY OF JAVA SCRIPT:
. Earlier in 1990's there was a company named Netscape who wanted to build a scripting language for their browser called Netscape Navigator.
. They hired a person called brendon Eich and asked him to develop a scripting language.
. He developed a scripting language and named it as Mocha.
. Later it was named a Live Script bu as amarketing strategy they changed its name to JavaScript in the year 1995.
. To make javascript open source they handed it to ECMA(European Computer Manufacturing Association)in the year 1997.so it also called as ECMA script.
. To run the javascript code outside the browser, node.js was introduced which can run the code in the editor itself.


KEY FEATURES OF JS:
1. It is a scripting language.
-because each and every code written in JS can be read , analyse and executed in he browser itself.
2. It is a weekly/loosely typed language.
-if the statement is not ended with semi-colon or if datatype is missing for a variable it will not display any errors.
3.It is dynamically typed language.
-if you declare any variable and assign a numeric value to it , later we can store any kind of data whether it might be string,Boolean etc.....
4. It is a synchronous single  threaded/interpreted language.
- It reads code line by line and executes, if at all it finds an error it will stop it s execution there itself without moving to nextline.
5.it is high level programming language.
6.platform independent
7.opps


java script can display data in different ways:
---writing into an HTML element using = innerHTML
---writing into the HTML output using = document.write()
---writing into an alert box using = window.alert()
---writing into browser console using = console.log()


WAYS TO ADD JS:
1.internal JS
2.external JS

INTERNAL JS:
It refers to writing JS code in the same HTML file inside body tag using the script tag.
<body> 
      <script>

      //js code

     </script>

</body> 
 EXTERNAL JS:
it refers to the writing the JS code by maintaining a separate file saved with extension .js
To establish connection b/w html and js file ,we specify as
  <body>
       <script src="path of js file">
</script>

</body>


VARIABLES:



OPERATORS:
- Arithmetic operators
- Comparison operators
- Logical operators
- Assignment operators
- Bitwise operators
- Ternary operators


Arithmetic operators
- Add       2+4
- Subtract  2-4
- Multiply  2*4
-Divide     2/4
- Modulus   5%2=1
- Negate    -(2)


Comparison operators
- a==b True if a and b both are same
- a!=b True if a and b both are not same
- a>b  true if a is greater than b
- a>=b  true if a is greater than or equal to b
- a<b   true if a is less than b
- a<=b  true if a is less than or equal to b

Assignment operators

Assignment operators assign values to JavaScript variables.

Operator	Example	Same As
=	x = y	x = y
+=	x += y	x = x + y
-=	x -= y	x = x - y
*=	x *= y	x = x * y
/=	x /= y	x = x / y
%=	x %= y	x = x % y
**=	x **= y	x = x ** y

Shift Assignment Operators
Operator	Example	Same As
<<=	x <<= y	x = x << y
>>=	x >>= y	x = x >> y
>>>=	x >>>= y	x = x >>> y


Logical Assignment Operators
Operator	Example	Same As
&&=	x &&= y	x = x && (x = y)
||=	x ||= y	x = x || (x = y)
??=	x ??= y	x = x ?? (x = y)

Bitwise Assignment Operators
Operator	Example	Same As
&=	x &= y	x = x & y
^=	x ^= y	x = x ^ y
|=	x |= y	x = x | y


conditional statements:

*  if
   syntax:
    if(condition){
         //statements to be executed
           }
* if else
  syntax:
    if(condition){
         //statements to be executed
           }
    else{
//statements to be executed
           }
* 

